// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// IPChecker is an autogenerated mock type for the IPChecker type
type IPChecker struct {
	mock.Mock
}

type IPChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *IPChecker) EXPECT() *IPChecker_Expecter {
	return &IPChecker_Expecter{mock: &_m.Mock}
}

// GetIP provides a mock function with given fields: url, client
func (_m *IPChecker) GetIP(url string, client *http.Client) (string, error) {
	ret := _m.Called(url, client)

	if len(ret) == 0 {
		panic("no return value specified for GetIP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *http.Client) (string, error)); ok {
		return rf(url, client)
	}
	if rf, ok := ret.Get(0).(func(string, *http.Client) string); ok {
		r0 = rf(url, client)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, *http.Client) error); ok {
		r1 = rf(url, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPChecker_GetIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIP'
type IPChecker_GetIP_Call struct {
	*mock.Call
}

// GetIP is a helper method to define mock.On call
//   - url string
//   - client *http.Client
func (_e *IPChecker_Expecter) GetIP(url interface{}, client interface{}) *IPChecker_GetIP_Call {
	return &IPChecker_GetIP_Call{Call: _e.mock.On("GetIP", url, client)}
}

func (_c *IPChecker_GetIP_Call) Run(run func(url string, client *http.Client)) *IPChecker_GetIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*http.Client))
	})
	return _c
}

func (_c *IPChecker_GetIP_Call) Return(_a0 string, _a1 error) *IPChecker_GetIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IPChecker_GetIP_Call) RunAndReturn(run func(string, *http.Client) (string, error)) *IPChecker_GetIP_Call {
	_c.Call.Return(run)
	return _c
}

// NewIPChecker creates a new instance of IPChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPChecker {
	mock := &IPChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
